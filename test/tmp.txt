void VCurveline::draw(QPainter *painter)
{
    painter->setPen(QPen(QBrush(Qt::black),1,Qt::SolidLine,Qt::RoundCap,Qt::RoundJoin));
    painter->setBrush(defaultBrush);
    VSize trans(getTranslate());

    double x[20], y[20];
    for(int i = 0; i < points.size(); i++){
        x[i] = this->points[i].x;
        y[i] = this->points[i].y;
        //qDebug()<<">>> "<<x[i]<<" "<<y[i]<<endl;
    }
    int seg = (points.size()-1)/2;
    for(int sg = 0; sg < seg; sg++){
        Newton newton(2, x+3*sg, y+3*sg);
        QPolygonF qpf;
        double h = 1*(newton.R-newton.L)/getSize().x;
        int len = (int)(getSize().x);
        for(int i = 0; i <= len; i++){
            VPoint point(newton.L+i*h, newton.calNewDiffer(newton.L+i*h));
            qpf << point.translate(trans).toQPointF();
        }
        VPoint vp(*(x+3*sg), *(y+3*sg));
        qpf << vp.translate(trans).toQPointF();
        painter->drawPolyline(qpf);
    }